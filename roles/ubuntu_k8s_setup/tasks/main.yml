---
- name: configure k8s module file
  ansible.builtin.template: 
    src: "{{ item.src }}{{ item.file }}.j2"
    dest: "{{ item.dest }}{{ item.file }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop: "{{ modules_loadd }}"

- name: kernel module setup for k8s
  community.general.modprobe:
    name: "{{ item.module }}"
    state: "{{ item.state }}"
  loop: "{{ k8s_kernel_modules }}"

- name: configure k8s module file
  ansible.builtin.template: 
    src: "{{ item.src }}{{ item.file }}.j2"
    dest: "{{ item.dest }}{{ item.file }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop: "{{ sysctld }}"
  notify: sysctl --system

- name: check swap status
  ansible.builtin.command: swapon -s
  register: swap_check
  failed_when: false
  changed_when: false

- name: swap off
  ansible.builtin.command: swapoff -a
  when: swap_check.stdout

- name: unmount swap entry
  ansible.posix.mount:
    path: "{{ mountPoint.k8s.path }}"
    state: "{{ mountPoint.k8s.state }}"

- name: check swap file
  ansible.builtin.stat:
    path:  "{{ mountPoint.k8s.path }}"
  register: file_stat

- name: remove swap file
  ansible.builtin.file:
    path: "{{ mountPoint.k8s.path }}"
    state: absent
  when: file_stat.stat.exists

- name: configure fstab
  ansible.builtin.template:
    src: "{{ fstabFile.src }}{{ fstabFile.file }}.j2"
    dest: "{{ fstabFile.dest }}{{ fstabFile.file }}"
    owner: "{{ fstabFile.owner }}"
    group: "{{ fstabFile.group }}"
    mode: "{{ fstabFile.mode }}"
  notify: u6s-master system reboot

- name: configure /etc/hosts
  ansible.builtin.template:
    src: "{{ etcHosts.src }}{{ etcHosts.file }}.j2"
    dest: "{{ etcHosts.dest }}{{ etcHosts.file }}"
    owner: "{{ etcHosts.owner }}"
    group: "{{ etcHosts.group }}"
    mode: "{{ etcHosts.mode }}"

- name: install containerd runtime for k8s
  ansible.builtin.apt:
    name: "{{ apt_k8s_packages.containerRuntime.name }}"
    state: "{{ apt_k8s_packages.containerRuntime.state }}"
    update_cache: true

- name: configure countainerd
  block:
    - name: make directory ({{ containerdService.configPath }})
      ansible.builtin.file:
        path: "{{ containerdService.configPath }}"
        state: directory

    - name: make containerd /tmp/{{ containerdService.configFile }}
      ansible.builtin.shell: | 
        containerd config default | sudo tee /tmp/{{ containerdService.configFile }} && 
        sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /tmp/{{ containerdService.configFile }} && 
        sudo sed -i 's#sandbox_image = "registry.k8s.io/pause:3.6"#sandbox_image = "registry.k8s.io/pause:3.9"#g' /tmp/{{ containerdService.configFile }}
      changed_when: false
  
    - name: set Fact var
      ansible.builtin.set_fact:
        file_copied: "{{ containerdService.configFile + ' is replaced.' }}"

    - name: Replace {{ containerdService.configFile }}
      ansible.builtin.shell: |
        if [ ! -f {{ containerdService.configPath }}{{ containerdService.configFile }} ] || ! cmp -s /tmp/{{ containerdService.configFile }} {{ containerdService.configPath }}{{ containerdService.configFile }}; then
          cp /tmp/{{ containerdService.configFile }} {{ containerdService.configPath }}{{ containerdService.configFile }}
          echo {{ containerdService.configFile}} is replaced.
        fi
      register: confCopyResult
      changed_when: confCopyResult.rc == file_copied

    - name: debug1
      ansible.builtin.debug: 
        msg: "{{ confCopyResult.stdout }}"

    - name: debug2
      ansible.builtin.degub:
        msg: file_copied

    - name: "{{ containerdService.serviceName }} restart"
      ansible.builtin.systemd:
        name: "{{ containerdService.serviceName }}"
        state: "{{ containerdService.state }}"
      when: "'cp /tmp/{{ containerdService.configFile }} {{ containerdService.configPath }}{{ containerdService.configFile }}' in confCopyResult"

    - name: containerd enabled
      ansible.builtin.systemd:
        name: "{{ containerdService.serviceName }}"
        enabled: "{{ containerdService.enabled }}"

- name: install k8s premise packages
  ansible.builtin.apt:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    update_cache: true
  loop: "{{ apt_k8s_packages.kubePremise }}"

- name: Download K8s APT key
  block:
    - name: Download k8s APT Key to /tmp/
      ansible.builtin.get_url:
        url: "{{ apt_key.k8s.downloadURL }}{{ apt_key.k8s.downloadKey }}"
        dest: /tmp/{{ apt_key.k8s.ascFile }}
        mode: '0644'
        force: true
      changed_when: false

    - name: Convert k8s APT Key .asc to .gpg
      ansible.builtin.command: |
        gpg --dearmor -o /tmp/{{ apt_key.k8s.gpgFile }} /tmp/{{ apt_key.k8s.ascFile }}
      changed_when: false

    - name: set Fact var
      ansible.builtin.set_fact:
        file_copied: "{{ apt_key.k8s.gpgFile + ' is replaced.' }}"

    - name: Replace {{ apt_key.k8s.gpgFile }}
      ansible.builtin.shell: |
        if [ ! -f {{ apt_key.k8s.dirPath }}{{ apt_key.k8s.gpgFile }} ] || ! cmp -s /tmp/{{ apt_key.k8s.gpgFile }} {{ apt_key.k8s.dirPath }}{{ apt_key.k8s.gpgFile }}; then
          cp /tmp/{{ apt_key.k8s.gpgFile }} {{ apt_key.k8s.dirPath }}{{ apt_key.k8s.gpgFile }}
          echo {{ apt_key.k8s.gpgFile }} is replaced.
        fi
      register: gpgCopyResult
      changed_when: gpgCopyResult.rc == file_copied

    - name: debug2
      ansible.builtin.debug:
        msg: file_copied

- name: Add k8s repository
  ansible.builtin.template:
    src: "{{ apt_repository.k8s.src }}{{ apt_repository.k8s.file }}.j2"
    dest: "{{ apt_repository.k8s.src }}{{ apt_repository.k8s.file }}"
    owner: "{{ apt_repository.k8s.owner }}"
    group: "{{ apt_repository.k8s.group }}"
    mode: "{{ apt_repository.k8s.mode }}"
  when: "'cp /tmp/{{ apt_key.k8s.gpgFile }} {{ apt_key.k8s.dirPath }}{{ apt_key.k8s.gpgFile }}' in gpgCopyResult"

- name: install kubeadm / kubectl / kubelet
  ansible.builtin.apt:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  loop: "{{ apt_k8s_packages.kubeEtc }}"

- name: hold package update
  ansible.builtin.dpkg_selections:
    name: '{{ item.name }}'
    selection: hold
  loop: "{{ apt_k8s_packages.kubeEtc }}"
