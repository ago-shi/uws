---
- name: kubeVIP install at all master nodes
  block:
    - name: configure {{ etcHosts.dest }}{{ etcHosts.file }}
      ansible.builtin.template:
        src: "{{ etcHosts.src }}{{ etcHosts.file }}.j2"
        dest: "{{ etcHosts.dest }}{{ etcHosts.file }}"
        owner: "{{ etcHosts.owner }}"
        group: "{{ etcHosts.group }}"
        mode: "{{ etcHosts.mode }}"
    - name: configure {{ k8sFile.kubeVIP.dest }}{{ k8sFile.kubeVIP.file }}
      ansible.builtin.template:
        src: "{{ k8sFile.kubeVIP.src }}{{ k8sFile.kubeVIP.file }}.j2"
        dest: "{{ k8sFile.kubeVIP.dest }}{{ k8sFile.kubeVIP.file }}"
        owner: "{{ k8sFile.kubeVIP.owner }}"
        group: "{{ k8sFile.kubeVIP.group }}"
        mode: "{{ k8sFile.kubeVIP.mode }}"

- name: Check k8s cluster build status
  ansible.builtin.stat:
    path: "{{ k8sFile.adminConf.dest }}"
  register: k8sAdminConf

- name: Initialize Kubernetes master (represent master node only)
  ansible.builtin.command:
    cmd: >
      kubeadm init 
      --control-plane-endpoint {{ k8s.network.vhost }}:{{ k8s.network.port}} 
      --pod-network-cidr={{ k8s.network.cidr }} 
      --upload-certs
  when: (kubeadmInitNode == 'true') and (not k8sAdminConf)
        
- name: Set initial fact "joinRequired(Exec kubeadm join flag) = false"
  ansible.builtin.set_fact:
    joinRequired: false
  run_once: true

- name: check kubeadm init exec
  ansible.builtin.set_fact:
    joinRequired: true
  when: (hostvars[item]['kubeadmInitNode'] == 'false') and (not hostvars[item].k8sAdminConf.stat.exists)
  loop: "{{ k8s.master.nodeList }}"
  run_once: true

- name: k8s token create on represent master node
  ansible.builtin.command: 
    cmd: kubeadm token create --print-join-command
  register: k8sJoin
  when: (kubeadmInitNode == 'true') and joinRequired

- name: kubeadm join command set
  ansible.builtin.set_fact:
    kubeadmJoin: "{{ k8sJoin.stdout }}"
  run_once: true
  when: (kubeadmInitNode == 'true') and joinRequired

- name: exec kubeadm init phase upload-certs --upload-certs
  ansible.builtin.command: 
    cmd: kubeadm init phase upload-certs --upload-certs
  register: k8sCertOutput
  when: (kubeadmInitNode == 'true') and joinRequired

- name: get k8s certs
  ansible.builtin.set_fact:
    k8sCertKey: "{{ k8sCertOutput.stdout_lines[-1] }}"
  run_once: true
  when: (kubeadmInitNode == 'true') and joinRequired
  
- name: exec "kubeadm join" on master node
  ansible.builtin.command:
    cmd: "{{ kubeadmJoin }} --control-plane --certificate-key {{ k8sCertKey }}"
    creates: "{{ k8sFile.adminConf.dest }}"
  when: (kubeadmInitNode == 'false') and joinRequired

# if ubuntu_k8s_setup task does not execute, you need to remove commentout.
# - name: Add k8s operation User
#  ansible.builtin.import_tasks: roles/ubuntu_basic_setup/tasks/user.yml

- name: make directory (/home/targetUser/.kube)
  ansible.builtin.file:
    path: /home/{{ item.name }}/.kube
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  when: "{{ item.auth.kubectl }}"
  loop: "{{ linuxUsers }}"

- name: Add kubectl authority
  ansible.builtin.shell: |
    if [ ! -f /home/{{ item.name }}/.kube/{{ k8sFile.kubectlAuth.file }} ] || ! cmp -s {{ k8sFile.kubectlAuth.src }} /home/{{ item.name }}/.kube/{{ k8sFile.kubectlAuth.file }}; then
      cp {{ k8sFile.kubectlAuth.src }} /home/{{ item.name }}/.kube/{{ k8sFile.kubectlAuth.file }}
      chown {{ item.name }}:{{ item.name }} /home/{{ item.name }}/.kube/{{ k8sFile.kubectlAuth.file }}
      echo /home/{{ item.name }}/.kube/{{ k8sFile.kubectlAuth.file }} is replaced.
    fi
  register: confCopyResult
  changed_when: confCopyResult.stdout != ''
  when: "{{ item.auth.kubectl }}"
  loop: "{{ linuxUsers }}"

# 任意のCNIを利用できるようにCNIインストールはtaskを切り出し。
- name: CNI=cilium install
  ansible.builtin.import_tasks: cilium.yml
