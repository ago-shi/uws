---
# cloud-init無効化
# hostname設定
# タイムゾーン設定
# aptキャッシュupdate & upgrade
# パッケージのインストール
# 時刻同期設定
# ネットワーク設定
# 信頼できるルート証明書のインストール
# ユーザ設定

- name: Disable cloud-init
  ansible.builtin.file:
    path: "{{ cloudInit.path }}{{ cloudInit.file }}"
    state: touch
    access_time: preserve
    modification_time: preserve

- name: hostname setup name->"{{ inventory_hostname }}"
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: timezone setup to "{{ datetime_timezone }}"
  community.general.timezone:
    name: "{{ datetime_timezone }}"

- name: Update apt cache ans apt upgrade
  ansible.builtin.apt:
    update_cache: true
    upgrade: full
    purge: true

- name: install packages
  ansible.builtin.import_tasks: apt.yml

- name: configure Chrony
  ansible.builtin.template:
    src: "{{ chronyService.src | default(defaultFileSet.src) }}/{{ chronyService.configFile }}.j2"
    dest: "{{ chronyService.configPath }}/{{ chronyService.configFile }}"
    owner: "{{ chronyService.owner | default(defaultFileSet.owner) }}"
    group: "{{ chronyService.group | default(defaultFileSet.group) }}"
    mode: "{{ chronyService.mode | default(defaultFileSet.mode) }}"
  register: chronyUpdate

- name: Restart chrony service
  ansible.builtin.systemd:
    name: chrony
    state: restarted
    enabled: true
  when: chronyUpdate.changed

- name: Rename builtin netplan file 
  block:
  - name: configure network (check currnet netplan filename)
    ansible.builtin.stat:
      path: "{{ item.dest }}/{{ item.file }}"
    register: file_stat
    loop: "{{ netplanBuiltin }}"

  - name: Rename netplan file
    ansible.builtin.command: mv "{{ item.1.dest }}/{{ item.1.file }}" "{{ item.1.dest }}/{{ item.1.file }}.org"
    when: item.0.stat.exists
    loop: "{{ file_stat.results | product(netplanBuiltin) }}"

- name: configure network (transfer netplan file)
  ansible.builtin.template:
    src: "{{ item.src | default(defaultFileSet.src) }}/{{ item.file }}.j2"
    dest: "{{ item.dest }}/{{ item.file }}"
    owner: "{{ item.owner | default(defaultFileSet.owner) }}"
    group: "{{ item.group | default(defaultFileSet.group) }}"
    mode: "{{ item.mode | default(defaultFileSet.mode) }}"
  loop: "{{ netplan }}"
  register: netplanUpdate

- name: netplan apply
  ansible.builtin.command: "netplan apply --debug"
  when: netplanUpdate.results | selectattr('changed', 'equalto', true) | list | length > 0

- name: Copy the CA certificate
  ansible.builtin.copy:
    src: "{{ item.src | default(defaultFileSet.src) }}/{{ item.file }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default(defaultFileSet.owner) }}"
    group: "{{ item.group | default(defaultFileSet.group) }}"
    mode: "{{ item.mode | default(defaultFileSet.mode) }}"
  loop: "{{ certification }}"
  register: certCopy

- name: Update the CA certificates
  ansible.builtin.command: update-ca-certificates
  when: certCopy.results | selectattr('changed', 'equalto', true) | list | length > 0

- name: Verify the CA certificates are installed
  ansible.builtin.command: openssl x509 -in "{{ item.dest }}" -text -noout
  when: item.changed
  loop: "{{ certCopy.results }}"

- name: import ubuntu_user task
  ansible.builtin.import_tasks: user.yml
